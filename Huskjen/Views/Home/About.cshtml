@{
    ViewData["Title"] = "About";
}
<h1>@ViewData["Title"]</h1>

<p>Huskjen is an address book web application, written in ASP.NET Core MVC using C# and .NET6. The word "huskjen" is a west norwegian dialectal word which means "the memory". Fitting for a web app which remembers information for you.</p>

<div class="row row-cols-1 row-cols-lg-2">
    <div class="col-lg-8">
        <pre class="line-numbers"><code class="language-csharp">
                public class Contact
                {
                    public int Id { get; set; }

                    [Required]
                    [Display(Name = "First Name")]
                    public string FirstName { get; set; }

                    [Required]
                    [Display(Name = "Last Name")]
                    public string LastName { get; set; }

                    [Required]
                    [Display(Name = "Address 1")]
                    public string Addrerss1 { get; set; }

                    [Display(Name = "Address 2")]
                    public string? Addrerss2 { get; set; }

                    [Required]
                    public string City { get; set; }
                    public string? State { get; set; }

                    [DataType(DataType.PostalCode)]
                    public int Zip { get; set; }

                    [DataType(DataType.EmailAddress)]
                    public string Email { get; set; }

                    [DataType(DataType.PhoneNumber)]
                    public string Phone { get; set; }
                    public DateTime Created { get; set; }

                    [NotMapped]
                    [Display(Name = "Image")]
                    [DataType(DataType.Upload)]
                    public IFormFile? ImageFile { get; set; }
                    public byte[]? ImageData { get; set; }
                    public string? ImageType { get; set; }

                    [NotMapped]
                    public string FullName { get { return $"{FirstName} {LastName}"; } }
                }

                public interface IImageService
                {
                    public Task< byte[] > ConvertFileToByteArrayAsync(IFormFile file);
                    public string ConvertByteArrayToFile(byte[] fileData, string extension);
                }

                public class BasicImageService : IImageService
                {
                    public string ConvertByteArrayToFile(byte[] fileData, string extension)
                    {
                        if (fileData is null) return string.Empty;

                        string imageBase64Data = Convert.ToBase64String(fileData);
                        return $"data:{extension};base64,{imageBase64Data}";
                    }

                    public async Task< byte[] > ConvertFileToByteArrayAsync(IFormFile file)
                    {
                        using MemoryStream memoryStream = new();
                        await file.CopyToAsync(memoryStream);
                        byte[] byteFile = memoryStream.ToArray();

                        return byteFile;
                    }
                }
            </code>
            </pre>

    </div>
    <div class="col-lg-4">
        <h4>How It Works</h4>
        <p>The core of the application`s functionality is the Contact model. Serving both as a "blueprint" for the database table, and holding the properties needed for the web app to store, retrieve and display variable data.</p>

        <h5>Images</h5>
        <p>Images are stored as byte arrays in the database. In order to convert them from IFormFile to byte array we use a custom written BaseImageService and IImageService interface. The BaseImageService also converts the byte array to a base64 string for image display in UI.</p>

        <h5>Controllers and Views</h5>
        <p>The controller and views for the address book itself are scaffolded in Visual Studio with Entity Framework, and modified to have the specific layouts and functionalities wanted.</p>
    </div>

    @section scripts {
    <script src="~/js/prism.js"></script>
    <script src="~/js/prism-csharp.js"></script>
    <script>
        Prism.plugins.NormalizeWhitespace.setDefaults({
            'remove-trailing': true,
            'remove-indent': true,
            'left-trim': true,
            'right-trim': true
        })
    </script>
    }
